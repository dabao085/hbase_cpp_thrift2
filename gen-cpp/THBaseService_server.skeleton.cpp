// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "THBaseService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::apache::hadoop::hbase::thrift2;

class THBaseServiceHandler : virtual public THBaseServiceIf {
 public:
  THBaseServiceHandler() {
    // Your initialization goes here
  }

  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param tget the TGet to check for
   */
  bool exists(const std::string& table, const TGet& tget) {
    // Your implementation goes here
    printf("exists\n");
  }

  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param tget the TGet to fetch
   */
  void get(TResult& _return, const std::string& table, const TGet& tget) {
    // Your implementation goes here
    printf("get\n");
  }

  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param tgets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) {
    // Your implementation goes here
    printf("getMultiple\n");
  }

  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param tput the TPut to put
   */
  void put(const std::string& table, const TPut& tput) {
    // Your implementation goes here
    printf("put\n");
  }

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tput the TPut to put if the check succeeds
   */
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) {
    // Your implementation goes here
    printf("checkAndPut\n");
  }

  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param tputs a list of TPuts to commit
   */
  void putMultiple(const std::string& table, const std::vector<TPut> & tputs) {
    // Your implementation goes here
    printf("putMultiple\n");
  }

  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param tdelete the TDelete to delete
   */
  void deleteSingle(const std::string& table, const TDelete& tdelete) {
    // Your implementation goes here
    printf("deleteSingle\n");
  }

  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param tdeletes list of TDeletes to delete
   */
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) {
    // Your implementation goes here
    printf("deleteMultiple\n");
  }

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tdelete the TDelete to execute if the check succeeds
   */
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) {
    // Your implementation goes here
    printf("checkAndDelete\n");
  }

  void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) {
    // Your implementation goes here
    printf("increment\n");
  }

  void append(TResult& _return, const std::string& table, const TAppend& tappend) {
    // Your implementation goes here
    printf("append\n");
  }

  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   */
  int32_t openScanner(const std::string& table, const TScan& tscan) {
    // Your implementation goes here
    printf("openScanner\n");
  }

  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) {
    // Your implementation goes here
    printf("getScannerRows\n");
  }

  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  void closeScanner(const int32_t scannerId) {
    // Your implementation goes here
    printf("closeScanner\n");
  }

  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param trowMutations mutations to apply
   */
  void mutateRow(const std::string& table, const TRowMutations& trowMutations) {
    // Your implementation goes here
    printf("mutateRow\n");
  }

  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) {
    // Your implementation goes here
    printf("getScannerResults\n");
  }

  /**
   * Given a table and a row get the location of the region that
   * would contain the given row key.
   * 
   * reload = true means the cache will be cleared and the location
   * will be fetched from meta.
   * 
   * @param table
   * @param row
   * @param reload
   */
  void getRegionLocation(THRegionLocation& _return, const std::string& table, const std::string& row, const bool reload) {
    // Your implementation goes here
    printf("getRegionLocation\n");
  }

  /**
   * Get all of the region locations for a given table.
   * 
   * 
   * @param table
   */
  void getAllRegionLocations(std::vector<THRegionLocation> & _return, const std::string& table) {
    // Your implementation goes here
    printf("getAllRegionLocations\n");
  }

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it mutates the row.
   * 
   * @return true if the row was mutated, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param compareOp comparison to make on the value
   * 
   * @param value the expected value to be compared against, if not provided the
   * check is for the non-existence of the column in question
   * 
   * @param rowMutations row mutations to execute if the value matches
   */
  bool checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const TCompareOp::type compareOp, const std::string& value, const TRowMutations& rowMutations) {
    // Your implementation goes here
    printf("checkAndMutate\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<THBaseServiceHandler> handler(new THBaseServiceHandler());
  shared_ptr<TProcessor> processor(new THBaseServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

